<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computersciences on Topology2333&#39;s Blog</title>
    <link>https://Topology2333.github.io/computerscience/</link>
    <description>Recent content in Computersciences on Topology2333&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://Topology2333.github.io/computerscience/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/1-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/1-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 1 提纲 1.1 什么是程序设计语言 1.2 程序设计语言的演化 1.3 构建和运行程序 1.4 程序设计语言分类 1.1 什么是程序设计语言 一、语言的概念：
语言（Language）是人类最重要的交际工具，是人们进行沟通交流的主要表达方式。 语言就广义而言，是一套共同采用的沟通符号、表达方式与处理规则。 语言的定义：由词汇和语法构成并能表达人类思想的符号系统。
二、计算机语言的概念：
计算机语言（Computer Language）指用于人与计算机之间通讯的语言。计算机语言是人与计算机之间传递信息的媒介。计算机系统最大特征是指令通过一种语言传达给机器。为了使电子计算机进行各种工作，就需要有一套用以编写计算机程序的数字、字符和语法规则，由这些字符和语法规则组成计算机各种指令（或各种语句）。这些就是计算机能接受的语言。
三、程序设计语言的概念
程序：指令（操作）序列。按照工作步骤事先编排好的、具有特殊功能的指令序列。
程序设计：程序设计是给出解决特定问题程序的过程，是程序构造活动中的重要组成部分。程序设计往往以某种程序设计语言为工具，给出这种语言下的程序。
程序设计语言：用于书写计算机程序的语言，用于表达和描述要加工的数据以及求解问题的步骤和过程。是根据预先定义的规则（词法、句法）、由一个有限字母表上的字符构成的字符串的总体。
#include &amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt;main(){int number1; /*变量声明*/int number2;int result;scanf(“%d%d”,&amp;amp;number1,&amp;amp;number2); /*输入 从键盘读取2个整数*/result = number1 * number2; /*乘积运算*/printf（“the result is : %d\n ”, result）; /*输出结果*/return 0;}机器语言的缺陷
非常晦涩难读； 书写工作量大，且容易出错，不易修改； 由于和具体的机器相关，要求开发人员对计算机的硬件和指令系统要有很正确深入的理解，并且有熟练的编程技巧，因此只有少数专家能达到此要求；移植性不好(在一台机器上编写的机器语言程序在不同型号的另一台机器上可能不能运行)； 1.2 程序设计语言的演化－符号语言 程序 注释(运算结果） MUL B B ; 送入BMUL A E ; 4a送入AMUL A C ； 4ac送入ASUB B A ; －4ac送入BMOV D B ； －4ac从B传送到DHLT ； 停机A aB bC cD dE 4汇编语言的局限</description>
    </item>
    
    <item>
      <title>10-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/10-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/10-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 10 提纲 二维数组的表达对象 二维数组的定义和初始化 二维数组在内存中的存放 二维数组的逐元素访问 二维数组名做函数实参 二维数组的应用 实例研究 1.二维数组的表达对象 案例：气象分析员要分析近5年降水量数据：（1）求每年平均降水量；（2）这5年每月的平均降水量。 问题：如何表示这些数据？ 用60个变量？ 用5个一维数组？ 如果要分析50年的数据，又该怎么办？ 使用一个元素为数组的数组(二维数组） float rains[5][12];
理解float rains[5][12]: float rains[5][12]：rains是一个包含5个元素的数组 float rains[5][12]：rains中每个元素的类型是float [12] 即：rains具有5个元素，每个元素是包含12个float数值的数组。如：rains[0]是一个数组，其元素为：rains[0][0],rains[0][1],&amp;hellip;&amp;hellip;rains[0][11].
也可以把rains看作是二维数组，包含5行，每行12列。
这5行12列数据构成1个矩阵（纵横排列的二维数据表格）。
工程中经常要使用矩阵来表达数据，进行运算
二维数组的表达对象：矩阵。矩阵中元素类型相同，元素通过所在行和列进行标识。
3.二维数组在内存中的存放 A[i]的内存地址：A+i*M（M是一个数组元素的字节数）
4.二维数组的逐元素访问 使用二重循环来遍历数组元素；#include&amp;lt;stdio.h&amp;gt;#define COLS 5#define ROWS 5int main(void ){int array[ROWS][COLS], row, col;//二维数组定义for (row=0;row&amp;lt;=ROWS-1;row++) //二维数组赋值for (col=0;col&amp;lt;=COLS-1;col++) //往一行赋值scanf(&amp;quot;%d&amp;quot;,&amp;amp;array[row][col]);for (row=0;row&amp;lt;=ROWS-1;row++) { //二维数组输出for (col=0;col&amp;lt;=COLS-1;col++) //输出一行printf(&amp;quot;%d&amp;quot;,array[row][col]);printf(“\n”);// 每输出一行元素后要换行}return 0; }# include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>11-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/11-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/11-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 11 提纲 9.1 指针 指针的概念与含义 指针变量的声明和初始化 指针运算符 指针应用于函数的传引用调用 9.2 指针与数组 指针表达式和指针的算术运算 指针和数组的关系（实例：字符数组） 动态数组（函数返回指针） 指针数组 *9.3 指向函数的指针 *9.4 对指针使用const限定符 指针是Ｃ语言中的重要概念，也是Ｃ语言的重要特色。
指针的作用：
较之其他方法通常可以生成更高效、紧凑的代码 ； 可得到多个函数的返回值; 操作动态数据结构； 以前学过静态数据结构（数据空间大小是编译时期确定的, 运行期间不能改变） 9.1 指针~概念与含义 变量值的存取──通过变量在内存中的地址对变量进行存取：
直接访问──直接利用变量的地址进行存取
scanf (“％ d&amp;quot;, &amp;amp;i) 的执行过程：
先找到变量i的起始地址2002；然后将键盘输入的值送到内存单元2002和2003中(假设int类型占用2字节内存)。 printf (“i=％d&amp;quot;, i) 的执行过程:
首先找到变量i的起始地址2002，然后从内存单元2002和2003中取出其值，将其输出。 间接访问─通过指针变量来访问该变量
可以定义一种特殊的变量（称为指针变量），用来存放其它变量的内存起始地址。 通过指针变量来访问其他变量。 指针(变量)的概念
指针变量是一种特殊的变量，也具有变量的三个要素：
（1）变量名：这与一般变量取名相同。 （2）指针变量的类型：是指针所指向的变量的类型。 （3）指针的值：是某个变量的内存地址。 指针变量的初始化
没有初始化的指针变量可能指向任意地址。 指针在使用前必须初始化，否则将会导致意想不到的问题！ 指针变量可以赋值为0（唯一可直接赋给指针变量的整数值）、NULL（在stdlib.h中定义的常量0）或某个内存地址。 当赋值为0或者NULL时，表示该指针为空指针，不指向任何地址。推荐当指针不指向任何地址时，赋值为NULL。 三类运算：
&amp;amp; 取变量的地址 * 取指针所指变量的值 （间接访问） = 指针的赋值运算 注意：当一个指针p是空指针时(即p==NULL或p==0)，禁止访问该指针指向的内存值！
以下代码运行不正确：
int *p;p=NULL; /*或p＝0*/printf(“%d”, *p);例2：指针的运用练习目的:体会变量的间接访问方式</description>
    </item>
    
    <item>
      <title>12-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/12-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/12-%E8%AE%A1%E5%AF%BC/</guid>
      <description>注：未完成，待优化
这一篇转载 10 提纲 10.1 引言 10.2 结构类型 10.3 结构变量的定义、初始化 10.4 结构类型的运算—访问结构变量成员 10.5 结构类型作为函数参数 10.6 结构数组 10.7 类型定义typedef 10.8 枚举类型 10.1 引言 在日常生活中，我们经常会用到一些表格。例如，下图是一张图书目录： 为了用计算机程序实现对上述表格及表格中的元素的管理，需要先将表格进行存储。表格中的元素如何存储？ 10.1 引言 根据以前知识，可定义7个数组来存储100本图书信息： char bookName[100][30]; //存储书名 char author[100][30]; //存储作者 char publisher[100][30]; //存储出版商名 char date[100][10]; //存储版权日期 int pages[100]; //存储页数 int copies[100]; //存储册数 float price[100]; //存储价格
存在的问题： 1.任何一本图书的信息分散在内存各处，要了解一本图书的信息，必须到各个数组的相应元素中去查找，很不方便。而且因为内存不集中，所以查找效率不高。 2.存储结构比较零散，不易管理。
而图书目录可以抽象为线性表（线性表是具有相同数据类型的n(n&amp;gt;=0)个数据元素的有限序列），每一本图书的信息是表中的一个元素。有没有可能用一个一维数组来存储图书目录，每个数组元素存储一本图书的所有信息？
如果可以，一个数组元素存储了多个不同类型的数据，那数组元素的类型又该如何定义？
程序设计语言（包括C语言）一般都设计了数据类型的扩展机制&amp;ndash;用户自定义数据类型。 用户可以根据具体问题的需要，设计符合自己要求的新的数据类型。 结构就是用户自定义的数据类型，结构可以用来解决上述问题。
10.2 结构类型的定义 一、结构类型的定义 结构是用其他类型的数据构造出来的数据类型 （注意：结构是一种数据类型）。
上述图书目录的例子可以定义如下形式的结构 （为了简化，假设一本书只包括书名、作者名和价格）：
#define MAXTITL 41 //书名最大长度#define MAXAUTL 31 //作者名最大长度struct book{char title[MAXTITL];char author[MAXAUTL];float value;}； #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>2-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/2-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/2-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 2 提纲 2.1 关于计算机和C语言 2.2 标识符（identifier） 2.2.1 数据类型 2.2.2 变量 2.2.3 常量 2.3 输入与输出 2.1 关于计算机和程序设计语言 实例：编一个程序，从键盘读入两个整数，要求在屏幕上输出相乘运算结果。
先聊点C语言
C语言规定的32个关键字：
auto double int struct break else long switch case enum register typedefchar extern return union const float short unsigned continue for signed void default goto sizeof volatiledo if static while2.2.1 数据类型 数据类型包括三层含义：
定义了值的取值范围（属于该类型的数据的取值范围），比如：整数类型 存储空间大小 （占用多少字节，二进制） 以及能应用于这些值上的一系列操作（数据操作）。 比如：整数的加减乘除 2.2.1 数据类型－整型 整数是由符号和一个或多个数字组成的正数、0或负数，又称为带符号的自然数 ，如+12,-38。
注意：在数学中，整数是一个无限集合，但对于计算机来说，只能表示它的一个有限子集（取决于存储空间的大小） 。
整型数据占用的内存单元数：
C语言中整型数据细分为四类：short int、int、long int和long long int。</description>
    </item>
    
    <item>
      <title>3-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/3-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/3-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 3 提纲 3.1 表达式 （expression) 3.2 语句 （statement） 3.3 函数	（function） 3.1 表达式 表达式（expression）是由运算符、操作数和括号组成的、计算求值的基本单位。 操作数可以是：常量、变量、函数调用和表达式； 表达式举例：
2 表达式无运算符，操作数为常量 i	表达式无运算符，操作数为变量sin(i) 表达式无运算符，操作数为函数调用2 + i 操作数为常量和变量i * cos(i) 操作数为变量和函数调用2 + i * sin(i) 加法运算的第2个操作数为表达式3.1 表达式表达式的定义是一个递归的形式，由下面四条规则构成:
（1）常量、变量、函数调用是表达式。 （2）如果 Ω 是表达式，则 (Ω) 是表达式；如果 θ 是单目运算符，θ允许前缀形式，则 θΩ 是表达式；如果 θ 允许后缀形式， Ωθ 是表达式。 （3）若 Ωl、Ω2、Ω3 是表达式， θ 是双目运算符，则 Ωl θ Ω2 是表达式；θ1 和 θ2 构成三目运算符，则 Ωl θ1 Ω2 θ2 Ω3 是表达式。 （4）只有有限次的使用上述规则得到的有限长度的字符串式子，才是表达式。 典型的几类运算符和表达式 ：</description>
    </item>
    
    <item>
      <title>4-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/4-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/4-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 4 提纲 4.1 计算过程与算法的概念 4.2 算法的三种结构 4.3 算法的描述 4.4 算法的基本方法 4.5 自动机计算模型 4.6 穷举法 4.1 计算 一、计算 计算机求解问题的本质是：计算
“计算”就是遵循一定的规则, 用刻板、机械的动作进行的过程 。 例：
对输入行12+3进行计算，得出15。
对一行汉字进行计算，得出英文。
输入公理和规则，得出结论。（定理证明）
二、计算过程 对复杂问题，直接写出能解决该问题的计算机程序是困难的，为此，人们在进行程序设计时分两步走： 1）算法设计：不使用程序设计语言，而使用一种较简单明了的表达方式（例如自然语言）设计出求解问题的步骤序列---算法。 2）程序编写：根据设计好的算法，使用某种程序设计语言编写该算法的程序 。
4.1 算法的概念 三、算法(Algorithm)的概念 算法：是解决问题的步骤序列（操作序列）。 四、算法的特性 是计算机可执行的操作； 要在计算机能力集上进行算法设计； 算法必须具备的五个特性：
可执行性：算法中的每一个步骤都是计算机可执行的（在计算机能力集范围内）； 确定性：算法中的每一个步骤，必须是明确定义的，不得有任何歧义性 ； 有穷性：算法必须在执行有穷步之后结束； 有输入信息的说明：加工对象的要求； 有输出信息的步骤 ：输出问题的答案。 例1 求1×2×…×9×10 ，即10！
算法思路：
N！=N ×（N-1）！ 10！=10 ×9！=10 ×9 ×8！ =10 ×9 ×8 ×7！ = ······ =10 ×9 ×8×… ×2 × 1! 先计算1！、再计算2!=2*1!、再计算3!=3*2!,…以此类推，直到计算出10!=10*9!。 使用变量p</description>
    </item>
    
    <item>
      <title>5-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/5-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/5-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 5 提纲 1 一些常用的转义序列 2 再论C语言的数据类型 3 混合运算时各种数据类型之间的转换 4 格式化输出 5 赋值运算符 6 自增和自减运算符 7 条件运算符和逗号运算符 8 算术运算符的优先级和结合性 9 switch多路选择结构 10 break和continue语句 一些常用的转义序列 C语言中，使用字符常量时，有一些字符是不可打印的，比如回车、退格等等。 还有一类特殊字符，在C语言中本身有特殊的意义，比如单引号、双引号等。 对于不可打印字符和语言中有特殊意义的字符，在C语言中使用转义字符‘\’表示。
3.1 一些常用的转义序列 #include &amp;lt;stdio.h&amp;gt;int main(void){float salary;printf(&amp;quot;\aEnter your desired monthly salary: &amp;quot;);printf(&amp;quot; $_______\b\b\b\b\b\b\b&amp;quot;);scanf(&amp;quot;%f&amp;quot;,&amp;amp;salary);printf(&amp;quot;\n\t$%.2f a month is $%.2f a year.&amp;quot;,salary,salary*12.0);printf(&amp;quot;\rGee!\n&amp;quot;);return 0;} /* /t的使用，打印‘’、\和％ */#include &amp;lt;stdio.h&amp;gt;int main(void){printf(&amp;quot;123456781234567812345678\n&amp;quot;); printf(&amp;quot;1\t12\t123\tHello!\n&amp;quot;); /*\t的使用*/printf(&amp;quot;1234\r\&amp;quot;\\%%\n&amp;quot;); /*打印&#39;&#39;、\和％*/return 0;}2 再论C语言的数据类型 C语言中有以下基本数据类型：</description>
    </item>
    
    <item>
      <title>6-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/6-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/6-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 6 提纲 5.3 子程序概念及设计 5.4 C语言的函数 5.5 头文件 5.6 函数应用举例 5.3 子程序概念与设计 能否将完成独立功能的代码包装成一个单元，并且可以供其他代码来调用？
——答案是可以：使用子程序
子程序定义 子程序是封装并给以命名的一段程序代码，这段代码完成子程序所定义的功能，可供调用。 封装：调用者只需要关心代码能完成什么功能，如何调用代码（即子程序接口），而不需要关心代码的内部实现。
子程序的控制和调用机制
引入子程序的目的：
程序“复用”，避免在程序中使用重复代码； 结构化程序设计的需要： 自顶向下、逐步细化，将复杂问题分解为相对简单的子问题，这些子问题用子程序实现，从而提高主程序结构的清晰性和易读性； 使程序的调试和维护变得更加容易。 子程序设计原则
高内聚：功能相对独立和完整；
低耦合：与外界（调用者）的关系尽量松散，不要太紧密，使其能方便地被重用；
for(num = 1000;num &amp;lt;= 9999;num++){flag = isPrim(num);//是素数则返回1，否则返回0if (flag == 1){reverseNum = reverse(num);//求逆数flag = isPrim(reverseNum);if (flag == 1){printf(&amp;quot;%d\n&amp;quot;,num);}}}5.4.2 函数的定义 函数定义的格式：
返回值类型 函数名( 参数列表 ) /*接口定义部分*/{ 声明语句}练习1：设计一个函数IsLeapYear(year)，用于判断year年是否是闰年。如果是，则返回1；否则返回0。
year年是否是闰年的判断条件为： year能被4整除但不能被100整除， 或 year能被400整除。 /*函数功能：判断是否闰年参数： year ：要判断的年份返回值：若是闰年，返回1，否则返回0*/int isLeapYear(int year) {if ( year % 4 == 0 &amp;amp;&amp;amp; year % 100 !</description>
    </item>
    
    <item>
      <title>7-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/7-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/7-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 7 提纲 递归的概念 递归过程 递归程序设计 1.递归的概念 原始递归函数在可计算性理论中占有重要地位，是一种算法思想和计算模型。 基于原始递归函数的递归算法是算法设计的有力工具，对于拓展编程思路非常有用。 进行递归算法设计的前提是要建立起递归概念，我们先从一个最简单的例子导入。
例：编写一个函数fac，计算阶乘n! 按过去的迭代算法，该函数可以写成：
int fac(int n){int i, p;p = 1;for(i = 2; i &amp;lt;= n; i++)p = p * i;return p;} 现在换一个角度考虑，n！不仅是1×2×3×…×n, 还可以定义成：
递归的定义： 从程序书写来看，在定义一个函数时，若在函数的功能实现部分又出现对它本身的调用，则称该函数是递归的或递归定义的。
从函数动态运行来看，当调用一个函数A时，在进入函数A且还没有退出（返回）之前，又再一次调用A，则称为函数A的递归调用。 递归可以分为直接递归和间接递归两种。
直接递归：函数体里面发生对自己的调用； 间接递归：函数A调用函数B，而函数B又直接或间接地调用函数A。 不用担心函数A内部又调用函数A，会使得调用无休无止，肯定存在某个条件，当该条件成立的时候，函数A将不会再调用自身。
例如，求n！时，该结束条件是 if(n == 0)
int f(int n){if (n == 0) return 1;elsereturn n * f(n-1);}2.递归过程 请思考： 发出f(2)调用时，将2赋值给形参n。然后发出f(1)调用，将1赋值给形参n。接着发出f(0)调用，将0赋值给形参n。后来赋给形参n的值会不会覆盖原来赋给n的值（如值1覆盖原来的值2）？为什么？
不会，每一次函数调用会在栈顶分配新的活动记录。</description>
    </item>
    
    <item>
      <title>8-计导导论</title>
      <link>https://Topology2333.github.io/computerscience/8-%E8%AE%A1%E5%AF%BC/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/8-%E8%AE%A1%E5%AF%BC/</guid>
      <description>这一篇转载 8 提纲 7.1 总结与回顾（数据类型与程序设计） 7.2 数组&amp;ndash;数据的存储结构 7.3 数组的声明、操作和使用 7.4 字符数组（字符串及操作） 7.5 数组作为函数参数的处理 7.6 数组的排序、查找算法 7.1 总结与回顾 数据类型内涵：
数据定义
整数/实数/字符等是对客观世界事物（数据）的抽象，逻辑表达。 数据的存储空间（范围） 长整型、短整形、浮点数、字符等数据所分配的存储空间各不相同。 数据的操作
算术、逻辑、关系运算。 简单数据类型的局限：
数据抽象的局限 很多客观世界的事物很难抽象到简单的数据类型上。比如：数列或级数的抽象。 存储能力的局限 处理能力的局限 比如对任意数列的排序和查找问题，依照目前的能力尚不能够进行处理。 增强数据的表达、存储和处理能力
7.2 数组&amp;ndash;数据存储结构 利用数组可增强复杂数据的存储能力、操作能力。例如，存储某个班学生的成绩、每天的温度等。
数组是一种数据的存储结构 表达对象（数据的抽象） 数组的存储结构 数组的操作
数组对表达对象的支持
现实世界经常存在这样的数据：某课程一个班级中按学号排列的各个学生考试成绩、一年中各月份的平均温度……其特点是这有限个数据元素的类型相同，且具有先后顺序关系；
上述特征的数据可以抽象为线性表、向量。
线性表（向量）是具有相同数据类型的n(n&amp;gt;=0)个数据元素的有限序列，通常记为：
（a1，a2，… ai-1，ai，ai+1，… an）
其中n为表长，n＝0时称为空表。
数组是对线性表的一种存储结构。 数组是一组连续的存储单元（存储结构）
连续的含义：这些存储单元位置相邻；
具有相同数据类型，相同的名字。 数组元素的访问（操作）
数组名[元素序号]。其中元素序号又称下标。
第一个元素的序号为0，因此c[0]引用数组c的第一个元素。c[i-1]引用第i个元素。 下标运算符“[ ]”（数组操作）
在赋值语句右边时，该操作从数组元素中检索数据；
例：x=c[1]；//读取下标为1的数组元素的值，赋给变量x； 在左边时，对数组元素赋值。
例：c[2]=x*3+5; //将赋值表达式右 边的值赋给下标为2的数组元素。
7.3.1 数组的声明 数组的声明： （C99标准之前） 语法格式：元素类型名 数组名[常量]；
元素类型名 可以是整型、字符型、浮点型、结构和指针。
常量说明数组元素的个数，运算结果必须为整型。</description>
    </item>
    
    <item>
      <title>实验性的课件复制体</title>
      <link>https://Topology2333.github.io/computerscience/2/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/2/</guid>
      <description>这一篇转载第九章：数组部分 提纲 7.1 总结与回顾（数据类型与程序设计） 7.2 数组&amp;ndash;数据的存储结构 7.3 数组的声明、操作和使用 7.4 字符数组（字符串及操作） 7.5 数组作为函数参数的处理 7.6 数组的排序、查找算法 7.1 总结与回顾 简单数据类型的局限：
数据抽象的局限
很多客观世界的事物很难抽象到简单的数据类型上。比如：数列或级数的抽象。存储能力的局限
处理能力的局限
比如对任意数列的排序和查找问题，依照目前的能力尚不能够进行处理。增强数据的表达、存储和处理能力 7.2 数组&amp;ndash;数据存储结构 数组对表达对象的支持 线性表（向量）是具有相同数据类型的n(n&amp;gt;=0)个数据元素的有限序列，通常记为：（a1，a2，… ai-1，ai，ai+1，… an）其中n为表长，n＝0时称为空表。 数组是对线性表的一种存储结构。数组是一组连续的存储单元（存储结构） 连续的含义：这些存储单元位置相邻；具有相同数据类型，相同的名字。数组元素的访问（操作） 数组名[元素序号]。其中元素序号又称下标。第一个元素的序号为0，因此c[0]引用数组c的第一个元素。c[i-1]引用第i个元素。下标运算符“[ ]”（数组操作）1. 在赋值语句右边时，该操作从数组元素中检索数据；例：x=c[1]；//读取下标为1的数组元素的值，赋给变量x；2. 在左边时，对数组元素赋值。例：c[2]=x*3+5; //将赋值表达式右 边的值赋给下标为2的数组元素。7.3.1 数组的声明 数组的声明： （C99标准之前）
语法格式：元素类型名 数组名[常量]；元素类型名 可以是整型、字符型、浮点型、结构和指针。常量说明数组元素的个数，运算结果必须为整型。数组的声明：（C99标准）
允许声明变长数组元素类型名 数组名[整型表达式]；int n;scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);int score[n]; //数组长度为变量7.</description>
    </item>
    
    <item>
      <title>0-前言</title>
      <link>https://Topology2333.github.io/computerscience/%E5%89%8D%E8%A8%80/</link>
      <pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Topology2333.github.io/computerscience/%E5%89%8D%E8%A8%80/</guid>
      <description>什么computer science都是假话罢！ 只不过系整理计算机导论的课件哒！ </description>
    </item>
    
  </channel>
</rss>
